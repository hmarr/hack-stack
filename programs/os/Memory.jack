// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048; // End of heap is 16383 (2^14-1)
        let heap[0] = 0;
        let heap[1] = 14336; // 16384 - 2048
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array blockStart, nextBlock;
        var int blockSize;
        var boolean searching;

        let blockStart = heap;
        let searching = true;

        while (searching) {
            let nextBlock = blockStart[0];
            let blockSize = blockStart[1];

            // We need two extra words for the free list header. Using > and +1
            // acheives this.
            if (blockSize > (size + 1)) {
                // Resize current block - we need to subtract the new block from
                // the end, plus two additional words used for the header. We don't
                // need to change the next ptr as we alloc from the end.
                let blockStart[1] = blockSize - size - 2;

                // Calculate the address of the new block, and set the size (used
                // when deAllocing).
                let blockStart = (blockStart + blockSize) - (size + 2);
                let blockStart[1] = size;
                let searching = false;
            } else {
                // Prevent infinite loops by looking for the null ptr
                if (nextBlock = 0) {
                    // Print EALLOC. Don't use a string as that requires an allocation.
                    do Output.printChar(69);
                    do Output.printChar(65);
                    do Output.printChar(76);
                    do Output.printChar(76);
                    do Output.printChar(79);
                    do Output.printChar(67);
                    do Sys.halt();
                }

                let blockStart = nextBlock;
            }
        }

        return blockStart + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[-2] = heap;
        let heap = o - 2;
        return;
    }
}
